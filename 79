class Solution {
public:
    int row, col, siz;
    
    bool exist(vector<vector<char>>& board, string word) {
        row = board.size();
        col = board[0].size();
        siz = word.length();
        for(int i=0;i<row;i++)
            for(int j=0;j<col;j++)
                if(board[i][j] == word[0])
                    if(dfs(board, word, i, j, 0))
                        return true;
        return false;
    }
    bool dfs(vector<vector<char>>& board, string word, int r, int c, int depth)
    {
        if(depth == siz)
            return true;
        if(r<0 || r>= row || c<0 || c>=col)
            return false;
        if(board[r][c] != word[depth] || board[r][c] == '%')
            return false;
        char temp = board[r][c];
        board[r][c] = '%';
        
        bool res = dfs(board, word, r+1, c, depth+1) ||       // dfs portion
                   dfs(board, word, r-1, c, depth+1) ||
                   dfs(board, word, r, c+1, depth+1) ||
                   dfs(board, word, r, c-1, depth+1);
        
        board[r][c] = temp; //clean up
        return res;
        
    }
};
